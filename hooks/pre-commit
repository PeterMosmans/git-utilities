#!/usr/bin/env python
# pylint: disable=invalid-name

"""Validate files before they are committed to a git repository.

Copyright (C) 2015-2017 Peter Mosmans [Go Forward]

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

"""


from __future__ import absolute_import
from __future__ import print_function

import re
import subprocess
import sys

try:
    import defusedxml
except ImportError as exception:
    print('This script needs external pip libraries: {0}'.format(exception),
          file=sys.stderr)
    print('Install the missing libraries using pip -r requirements.txt',
          file=sys.stderr)
    sys.exit(-1)


CONFIG_FILE = '.git/hooks/pre-commit.yml'
VERSION = '0.8'


def all_files():
    """Return a list of all files."""
    cmd = ['git', 'ls-files']
    process = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                               stderr=False)
    return process.stdout.read().splitlines()


def execute_command(cmd):
    """Execute command @cmd."""
    try:
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                                   stderr=subprocess.PIPE)
        stdout, stderr = process.communicate()
        result = process.returncode
    except OSError as exception:
        result = -1
        print('could not execute {0}: {1}'.format(cmd, exception.strerror), file=sys.stderr)
    print(stdout)
    return result == 0


def is_python(filename):
    """Return True if @filename is a Python script."""
    result = False
    try:
        with open(filename, 'r') as python_file:
            first_line = python_file.readline()
        result = '#!' in first_line and 'python' in first_line
    except IOError:
        pass
    return result


def main():
    """The main program."""
    options = {'config': CONFIG_FILE}
    options = read_config(options)
    if len(sys.argv) > 1:
        if sys.argv[1] == '-a':
            print('[+] validating all files')
            sys.exit(validate_files(all_files(), options) and options['reject'])
    sys.exit(validate_files(staged_files(), options) and options['reject'])


def read_config(options):
    """Read parameters from @options['config'], but do not overwrite non-empty parameters."""
    contents = False
    try:
        with open(options['config'], 'r') as config_file:
            contents = config_file.read()
    except IOError as exception:
        print('Could not open configuration file {0}: {1}'.
              format(options['config'], exception.strerror), file=sys.stderr)
    for key in ['docbuilder', 'python', 'reject', 'treshold', 'verbose', 'xml',
                'yaml']:
        if key not in options:
            if contents and re.findall(r'{0}:\s?(.*)'.format(key), contents):
                options[key] = re.findall(r'{0}:\s?(.*)'.format(key),
                                          contents)[0]
                if options[key].lower() == 'false':
                    options[key] = False
            else:
                options[key] = False
    try:
        options['treshold'] = float(options['treshold'])
    except ValueError:
        options['treshold'] = 0
        print('treshold should be a float, disabling', file=sys.stderr)
    if options['yaml']:
        try:
            import yaml
        except ImportError:
            print('could not import yaml, disabling validation', file=sys.stderr)
            options['yaml'] = False
    return options


def staged_files():
    """Return a list of all modified and added staged files."""
    cmd = ['git', 'diff', '--staged', '--name-only', '--diff-filter', 'AM']
    process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
    return process.stdout.read().splitlines()


def validate_files(filenames, options):
    """Check file extensions and call appropriate validator function."""
    return_value = 0
    for filename in filenames:
        if options['python']:
            if filename.lower().endswith('.py') or is_python(filename):
                return_value = validate_python(filename, options) or \
                               return_value
        if (filename.lower().endswith('.xml') or
                filename.lower().endswith('xml"')):
            return_value = validate_xml(filename, options) or return_value
        if (filename.lower().endswith('.yaml') or
                filename.lower().endswith('yml')):
            return_value = validate_yaml(filename, options) or return_value
    return return_value


def validate_python(filename, options):
    """Validate Python file by running pylint on it."""
    if not options['python'] and not options['treshold']:
        return 0
    print("[+] validating Python file using pylint: {0}".format(filename))
    try:
        result = execute_command(['pylint', '-E', filename])
        if options['treshold']:
            process = subprocess.Popen(['pylint', filename],
                                       stdout=subprocess.PIPE, stderr=False)
            stdout = process.communicate()
            if stdout:
                results = float(re.findall(r"Your code has been rated at (-?[\d\.]+)/10",
                                           str(stdout))[0])
                print('{0} has been rated {1}'.format(filename, results))
            else:
                results = 0.0
            if results < float(options['treshold']):
                print('[-] score of {0} ({1}) is below treshold of {2}'.
                      format(filename, results, options['treshold']))
                result = True
            else:
                result = False
    except (IOError, IndexError) as exception:
        print('[-] could not parse {0} ({1})'.format(filename, exception), file=sys.stderr)
        result = True
    return result


def validate_xml(filename, options):
    """Validate XML file by trying to parse it."""
    return_value = 0
    if not options['xml']:
        return return_value
    print("[+] validating XML file: {0}".format(filename))
    try:
        with open(filename, 'rb') as xml_file:
            defusedxml.sax.parse(xml_file, defusedxml.sax.ContentHandler())
    except IOError as exception:
        print('[-] could not parse {0} ({1})'.format(filename, exception))
        return_value = 1
    except Exception as exception:
        print('[-] validating {0} failed ({1})'.format(filename, exception))
        return_value = 1
    return return_value


def validate_yaml(filename, options):
    """Validate YAML file by trying to load it."""
    return_value = 0
    if not options['yaml']:
        return return_value
    import yaml
    print("[+] validating YAML file: {0}".format(filename))
    try:
        yaml.safe_load(open(filename))
    except yaml.YAMLError as exception:
        print('[-] validating {0} failed ({1})'.format(filename, exception))
        return_value = 1
    except IOError:
        print('[-] could not open {0}'.format(filename))
        return_value = 1
    return return_value


if __name__ == "__main__":
    main()
