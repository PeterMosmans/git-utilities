#!/usr/bin/env python

"""Validate files when they are received and before they are updated
by a git repository

Copyright (C) 2015-2017 Peter Mosmans [Go Forward]
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
"""

from __future__ import print_function

import subprocess
import sys

try:
    import defusedxml
except ImportError as exception:
    print('This script needs external pip libraries: {0}'.format(exception),
          file=sys.stderr)
    print('Install the missing libraries using pip -r requirements.txt',
          file=sys.stderr)
    sys.exit(-1)


# When set to True, the update will be rejected when validation fails
REJECT = True


def main():
    """Receives hook parameters from git."""
    (base, commit, ref) = sys.stdin.read().strip().split() #pylint: disable=unused-variable
    sys.exit(validate_files(received_files(base, commit), commit) and REJECT)


def received_files(base, commit):
    """Rturns a list of all received files."""
    cmd = ['git', 'diff', '--numstat', '--name-only',
           '{0}..{1}'.format(base, commit)]
    p = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE)
    return p.stdout.read().splitlines()


def validate_files(filenames, commit):
    """Checks file extensions and calls appropriate validator function."""
    return_value = 0
    for filename in filenames:
        if (filename.lower().endswith('.xml') or
                filename.lower().endswith('xml"')):
            return_value = validate_xml_file(filename, commit) or return_value
    return return_value


def validate_xml_file(filename, commit):
    """Validate XML file by trying to parse it."""
    return_value = 0
    cmd = ['git', 'show', '{0}:{1}'.format(commit, filename)]
    p = subprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE)
    xml_string = p.stdout.read()
    print("[+] validating XML file: {0}".format(filename))
    if not xml_string:  # for now, skip validation if file is empty
        return return_value
    try:
        defusedxml.sax.parseString(xml_string, defusedxml.sax.ContentHandler())
    except defusedxml.sax.SAXException as exception:
        print('[-] validating {0} failed: {1}'.format(filename, exception))
        return_value = 1
    except IOError as exception:
        print('[-] could not open {0}: {1}'.format(filename, exception))
        return_value = 1
    return return_value


main()
